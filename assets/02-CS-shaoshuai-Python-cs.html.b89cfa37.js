import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.175adf91.js";const e="/assets/image-20221013112157390.0e8e996a.png",p="/assets/image-20221013112904773.3b306404.png",o="/assets/image-20221013114143581.d13f2642.png",i={},c=t(`<h2 id="_1-词频分析" tabindex="-1"><a class="header-anchor" href="#_1-词频分析" aria-hidden="true">#</a> 1. 词频分析</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/13 11:05</span>
<span class="token comment"># @Author  : AI悦创</span>
<span class="token comment"># @FileName: demo.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># @Blog    ：https://bornforthis.cn/</span>
<span class="token keyword">def</span> <span class="token function">make_dictionary</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">try</span><span class="token punctuation">:</span>
		<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
		textoffile <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The file was not found.&quot;</span><span class="token punctuation">)</span>
	textoffile <span class="token operator">=</span> textoffile<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment"># print(textoffile)</span>
	<span class="token keyword">for</span> textoffiles <span class="token keyword">in</span> textoffile<span class="token punctuation">:</span>
		<span class="token comment"># print(textoffiles)</span>
		textoffiles <span class="token operator">=</span> textoffile<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment"># print(textoffiles)</span>
	<span class="token comment"># 	print(textoffiles)</span>
		words <span class="token operator">=</span> textoffiles<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token comment"># print(words)</span>
		wdict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>
			<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
				<span class="token keyword">if</span> word <span class="token keyword">in</span> wdict<span class="token punctuation">:</span>
					wdict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
				<span class="token keyword">else</span><span class="token punctuation">:</span>
					wdict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				<span class="token keyword">pass</span>
		<span class="token keyword">return</span> wdict


<span class="token comment"># Testing with the example data in the question</span>
dictionary <span class="token operator">=</span> make_dictionary<span class="token punctuation">(</span><span class="token string">&#39;data/data2.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span>
<span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/data.txt">data.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/data2.txt">data2.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/data3.txt">data3.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/empty.txt">empty.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/jelly.txt">jelly.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/jolly.txt">jolly.txt</a></li></ul><h2 id="question-2" tabindex="-1"><a class="header-anchor" href="#question-2" aria-hidden="true">#</a> Question 2</h2><p>Define a function my_enumerate(items) that behaves in a similar way to the built-in enumerate function. It should return a list of tuples (i, item) where item is the ith item, with 0 origin, of the list items (see the examples below). Check the test cases for how the function should work. Your function must not call python&#39;s inbuilt enumerate function.</p><blockquote><p>定义一个函数 my_enumerate(items)，其行为方式与内置的 enumerate 函数类似。它应该返回元组(i, item)的列表，其中 item 是列表项的第 i 个项，原点为0(参见下面的示例)。检查测试用例以了解该功能应该如何工作。你的函数不能调用 python 的内置 enumerate 函数。</p></blockquote><p><img src="`+e+`" alt="image-20221013112157390" loading="lazy"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_enumerate</span><span class="token punctuation">(</span>items<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	index <span class="token operator">=</span> <span class="token number">0</span>
	result_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> i <span class="token keyword">in</span> items<span class="token punctuation">:</span>
		result_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
		index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
	<span class="token keyword">return</span> result_lst


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
	r <span class="token operator">=</span> my_enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-3" tabindex="-1"><a class="header-anchor" href="#question-3" aria-hidden="true">#</a> Question 3</h2><p>Sequences of numbers in which there are frequent &quot;runs&quot; of a particular number repeating several times can often be more compactly represented by use of what is called &quot;run length encoding&quot;. A list is run-length encoded by representing it as a list of pairs (2-tuples), where each pair is a number and the length of the &quot;run&quot; of that number, where the length is 1 if a number occurs once, 2 if it occurs twice in a row, etc. Write a function run_length_encode(nums) that returns the run-length encoded representation of the list of integers, nums.</p><blockquote><p>一个特定的数字频繁地重复出现几次的数字序列，通常可以用所谓的“长度编码”来更紧凑地表示。通过将列表表示为一对(2元组)的列表，将其编码为运行长度，其中每对是一个数字和该数字的“运行”长度，如果一个数字出现一次，则长度为1，如果它在一行中出现两次，则长度为2，以此类推。编写一个函数run_length_encode(nums)，它返回整数列表nums的运行长度编码表示。</p></blockquote><p><img src="`+p+`" alt="image-20221013112904773" loading="lazy"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">run_length_encode</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	count_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> word <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
		<span class="token keyword">if</span> word <span class="token keyword">in</span> count_dict<span class="token punctuation">:</span>
			count_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			count_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token comment"># print(count_dict)</span>
	<span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>count_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
	r <span class="token operator">=</span> run_length_encode<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	r <span class="token operator">=</span> run_length_encode<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-4" tabindex="-1"><a class="header-anchor" href="#question-4" aria-hidden="true">#</a> Question 4</h2><p>Write a function composite2(N) which takes an integer N as an input and returns the Nth composite number which is NOT divisible by 2.</p><blockquote><p>编写一个函数composit2 (N)，它接受整数N作为输入，并返回第N个不能被2整除的合数。</p></blockquote><p><img src="`+o+'" alt="image-20221013114143581" loading="lazy"></p>',17),l=[c];function u(r,d){return s(),a("div",null,l)}const v=n(i,[["render",u],["__file","02-CS-shaoshuai-Python-cs.html.vue"]]);export{v as default};
